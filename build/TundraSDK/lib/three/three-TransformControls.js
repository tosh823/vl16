/**
 * @author arodic / https://github.com/arodic
 */
/*jshint sub:true*/
!function(){"use strict";var a=function(a){return!this||!Array.isArray(this.hideAxis)||this.hideAxis.indexOf(a)===-1},b=function(a){THREE.MeshBasicMaterial.call(this),this.depthTest=!1,this.depthWrite=!1,this.side=THREE.FrontSide,this.transparent=!0,this.setValues(a),this.oldColor=this.color.clone(),this.oldOpacity=this.opacity,this.highlight=function(a){a?(this.color.copy(THREE.TransformGizmo.highlightColor),this.opacity=1):(this.color.copy(this.oldColor),this.opacity=this.oldOpacity)}};b.prototype=Object.create(THREE.MeshBasicMaterial.prototype),b.prototype.constructor=b;var c=function(a){THREE.LineBasicMaterial.call(this),this.depthTest=!1,this.depthWrite=!1,this.transparent=!0,this.linewidth=1,this.setValues(a),this.oldColor=this.color.clone(),this.oldOpacity=this.opacity,this.highlight=function(a){a?(this.color.copy(THREE.TransformGizmo.highlightColor),this.opacity=1):(this.color.copy(this.oldColor),this.opacity=this.oldOpacity)}};c.prototype=Object.create(THREE.LineBasicMaterial.prototype),c.prototype.constructor=c;var d=new b({visible:!1,transparent:!1});THREE.TransformGizmo=function(){//debug
this.init=function(){THREE.Object3D.call(this),this.handles=new THREE.Object3D,this.pickers=new THREE.Object3D,this.planes=new THREE.Object3D,this.add(this.handles),this.add(this.pickers),this.add(this.planes);
//// PLANES
var a=new THREE.PlaneBufferGeometry(50,50,2,2),b=new THREE.MeshBasicMaterial({visible:!1,side:THREE.DoubleSide}),c={XY:new THREE.Mesh(a,b),YZ:new THREE.Mesh(a,b),XZ:new THREE.Mesh(a,b),XYZE:new THREE.Mesh(a,b)};this.activePlane=c.XYZE,c.YZ.rotation.set(0,Math.PI/2,0),c.XZ.rotation.set(-Math.PI/2,0,0);for(var d in c)c[d].name=d,this.planes.add(c[d]),this.planes[d]=c[d];
//// HANDLES AND PICKERS
var e=function(a,b){for(var c in a)for(d=a[c].length;d--;){var e=a[c][d][0],f=a[c][d][1],g=a[c][d][2];e.name=c,f&&e.position.set(f[0],f[1],f[2]),g&&e.rotation.set(g[0],g[1],g[2]),b.add(e)}};e(this.handleGizmos,this.handles),e(this.pickerGizmos,this.pickers),
// reset Transformations
this.traverse(function(a){if(a instanceof THREE.Mesh){a.updateMatrix();var b=a.geometry.clone();b.applyMatrix(a.matrix),a.geometry=b,a.position.set(0,0,0),a.rotation.set(0,0,0),a.scale.set(1,1,1)}})},this.highlight=function(a){this.traverse(function(b){b.material&&b.material.highlight&&(b.name===a?b.material.highlight(!0):b.material.highlight(!1))})}},THREE.TransformGizmo.highlightColor=new THREE.Color("yellow"),THREE.TransformGizmo.prototype=Object.create(THREE.Object3D.prototype),THREE.TransformGizmo.prototype.constructor=THREE.TransformGizmo,THREE.TransformGizmo.prototype.update=function(a,b){var c=new THREE.Vector3(0,0,0),d=new THREE.Vector3(0,1,0),e=new THREE.Matrix4;this.traverse(function(f){f.name.search("E")!==-1?f.quaternion.setFromRotationMatrix(e.lookAt(b,c,d)):f.name.search("X")===-1&&f.name.search("Y")===-1&&f.name.search("Z")===-1||f.quaternion.setFromEuler(a)})},THREE.TransformGizmoTranslate=function(e){THREE.TransformGizmo.call(this);var f=new THREE.Geometry,g=new THREE.Mesh(new THREE.CylinderGeometry(0,.05,.2,12,1,!1));if(g.position.y=.5,g.updateMatrix(),f.merge(g.geometry,g.matrix),this.handleGizmos={},this.pickerGizmos={},a.call(e.pos,"X")){var h=new THREE.BufferGeometry;h.addAttribute("position",new THREE.Float32Attribute([0,0,0,1,0,0],3)),this.handleGizmos.X=[[new THREE.Mesh(f,new b({color:e.colors.x})),[.5,0,0],[0,0,-Math.PI/2]],[new THREE.Line(h,new c({color:e.colors.x}))]],this.pickerGizmos.X=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[.6,0,0],[0,0,-Math.PI/2]]]}if(a.call(e.pos,"Y")){var i=new THREE.BufferGeometry;i.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,1,0],3)),this.handleGizmos.Y=[[new THREE.Mesh(f,new b({color:e.colors.y})),[0,.5,0]],[new THREE.Line(i,new c({color:e.colors.y}))]],this.pickerGizmos.Y=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[0,.6,0]]]}if(a.call(e.pos,"Z")){var j=new THREE.BufferGeometry;j.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,0,1],3)),this.handleGizmos.Z=[[new THREE.Mesh(f,new b({color:e.colors.z})),[0,0,.5],[Math.PI/2,0,0]],[new THREE.Line(j,new c({color:e.colors.z}))]],this.pickerGizmos.Z=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[0,0,.6],[Math.PI/2,0,0]]]}if(a.call(e.pos,"S")){var k=new THREE.Geometry;k.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(0,-1,0)),this.handleGizmos.S=[[new THREE.Mesh(f,new b({color:0})),[0,-.5,0],[0,0,Math.PI]],[new THREE.Line(k,new c({color:0}))]],this.pickerGizmos.S=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[0,-.6,0]]]}a.call(e.pos,"XYZ")&&(this.handleGizmos.XYZ=[[new THREE.Mesh(new THREE.OctahedronGeometry(.1,0),new b({color:16777215,opacity:.25})),[0,0,0],[0,0,0]]],this.pickerGizmos.XYZ=[[new THREE.Mesh(new THREE.OctahedronGeometry(.2,0),d)]]),a.call(e.pos,"XY")&&(this.handleGizmos.XY=[[new THREE.Mesh(new THREE.PlaneBufferGeometry(.29,.29),new b({color:e.colors.y,opacity:.25})),[.15,.15,0]]],this.pickerGizmos.XY=[[new THREE.Mesh(new THREE.PlaneBufferGeometry(.4,.4),d),[.2,.2,0]]]),a.call(e.pos,"YZ")&&(this.handleGizmos.YZ=[[new THREE.Mesh(new THREE.PlaneBufferGeometry(.29,.29),new b({color:e.colors.z,opacity:.25})),[0,.15,.15],[0,Math.PI/2,0]]],this.pickerGizmos.YZ=[[new THREE.Mesh(new THREE.PlaneBufferGeometry(.4,.4),d),[0,.2,.2],[0,Math.PI/2,0]]]),a.call(e.pos,"XZ")&&(this.handleGizmos.XZ=[[new THREE.Mesh(new THREE.PlaneBufferGeometry(.29,.29),new b({color:e.colors.x,opacity:.25})),[.15,0,.15],[-Math.PI/2,0,0]]],this.pickerGizmos.XZ=[[new THREE.Mesh(new THREE.PlaneBufferGeometry(.4,.4),d),[.2,0,.2],[-Math.PI/2,0,0]]]),this.setActivePlane=function(a,b){var c=new THREE.Matrix4;b.applyMatrix4(c.getInverse(c.extractRotation(this.planes.XY.matrixWorld))),"X"===a&&(this.activePlane=this.planes.XY,Math.abs(b.y)>Math.abs(b.z)&&(this.activePlane=this.planes.XZ)),"Y"===a&&(this.activePlane=this.planes.XY,Math.abs(b.x)>Math.abs(b.z)&&(this.activePlane=this.planes.YZ)),"Z"===a&&(this.activePlane=this.planes.XZ,Math.abs(b.x)>Math.abs(b.y)&&(this.activePlane=this.planes.YZ)),"XYZ"===a&&(this.activePlane=this.planes.XYZE),"XY"===a&&(this.activePlane=this.planes.XY),"YZ"===a&&(this.activePlane=this.planes.YZ),"XZ"===a&&(this.activePlane=this.planes.XZ)},this.init()},THREE.TransformGizmoTranslate.prototype=Object.create(THREE.TransformGizmo.prototype),THREE.TransformGizmoTranslate.prototype.constructor=THREE.TransformGizmoTranslate,THREE.TransformGizmoRotate=function(b){THREE.TransformGizmo.call(this);var e=function(a,b,c){var d=new THREE.BufferGeometry,e=[];c=c?c:1;for(var f=0;f<=64*c;++f)"x"===b&&e.push(0,Math.cos(f/32*Math.PI)*a,Math.sin(f/32*Math.PI)*a),"y"===b&&e.push(Math.cos(f/32*Math.PI)*a,0,Math.sin(f/32*Math.PI)*a),"z"===b&&e.push(Math.sin(f/32*Math.PI)*a,Math.cos(f/32*Math.PI)*a,0);return d.addAttribute("position",new THREE.Float32Attribute(e,3)),d},f=function(a,b){var c=new THREE.TorusGeometry(a,1.25==a?.01:.05,2,50),d=new THREE.Matrix4;return"x"==b&&d.makeRotationY(Math.PI*-.5),"y"==b&&d.makeRotationX(.5*Math.PI),c.applyMatrix(d),c},g=function(a,b,d,g,h){return h===!0?new THREE.Mesh(new f(a,b),new c({color:g})):new THREE.Line(new e(a,b,d),new c({color:g}))},h=function(a,b,c,e,f,g){return new THREE.Mesh(new THREE.TorusGeometry(a,b,c,e,f),d)},i=b.rot&&b.rot.useTorus===!0,j=i?2*Math.PI:void 0;this.handleGizmos={},this.pickerGizmos={},a.call(b.rot,"X")&&(this.handleGizmos.X=[[new g(1,"x",.5,b.colors.x,i)]],this.pickerGizmos.X=[[new h(1,.12,4,12,j,b.colors.x),[0,0,0],[0,-Math.PI/2,-Math.PI/2]]]),a.call(b.rot,"Y")&&(this.handleGizmos.Y=[[new g(1,"y",.5,b.colors.y,i)]],this.pickerGizmos.Y=[[new h(1,.12,4,12,j,b.colors.y),[0,0,0],[Math.PI/2,0,0]]]),a.call(b.rot,"Z")&&(this.handleGizmos.Z=[[new g(1,"z",.5,b.colors.z,i)]],this.pickerGizmos.Z=[[new h(1,.12,4,12,j,b.colors.z),[0,0,0],[0,0,-Math.PI/2]]]),a.call(b.rot,"E")&&(this.handleGizmos.E=[[new g(1.25,"z",1,b.colors.e,i)]],this.pickerGizmos.E=[[new h(1.25,.12,2,24,void 0,b.colors.e)]]),i||(this.handleGizmos.XYZE=[[new g(1,"z",1,7895160)]],this.pickerGizmos.XYZE=[[new THREE.Mesh(new THREE.Geometry)]]),this.setActivePlane=function(a){"E"===a&&(this.activePlane=this.planes.XYZE),"X"===a&&(this.activePlane=this.planes.YZ),"Y"===a&&(this.activePlane=this.planes.XZ),"Z"===a&&(this.activePlane=this.planes.XY)},this.update=function(a,b){THREE.TransformGizmo.prototype.update.apply(this,arguments);var c=({handles:this.handles,pickers:this.pickers},new THREE.Matrix4),d=new THREE.Euler(0,0,1),e=new THREE.Quaternion,f=new THREE.Vector3(1,0,0),g=new THREE.Vector3(0,1,0),h=new THREE.Vector3(0,0,1),i=new THREE.Quaternion,j=new THREE.Quaternion,k=new THREE.Quaternion,l=b.clone();d.copy(this.planes.XY.rotation),e.setFromEuler(d),c.makeRotationFromQuaternion(e).getInverse(c),l.applyMatrix4(c),this.traverse(function(a){e.setFromEuler(d),"X"===a.name&&(i.setFromAxisAngle(f,Math.atan2(-l.y,l.z)),e.multiplyQuaternions(e,i),a.quaternion.copy(e)),"Y"===a.name&&(j.setFromAxisAngle(g,Math.atan2(l.x,l.z)),e.multiplyQuaternions(e,j),a.quaternion.copy(e)),"Z"===a.name&&(k.setFromAxisAngle(h,Math.atan2(l.y,l.x)),e.multiplyQuaternions(e,k),a.quaternion.copy(e))})},this.init()},THREE.TransformGizmoRotate.prototype=Object.create(THREE.TransformGizmo.prototype),THREE.TransformGizmoRotate.prototype.constructor=THREE.TransformGizmoRotate,THREE.TransformGizmoScale=function(e){THREE.TransformGizmo.call(this);var f=new THREE.Geometry,g=new THREE.Mesh(new THREE.BoxGeometry(.125,.125,.125));g.position.y=.5,g.updateMatrix(),f.merge(g.geometry,g.matrix);var h=new THREE.BufferGeometry;h.addAttribute("position",new THREE.Float32Attribute([0,0,0,1,0,0],3));var i=new THREE.BufferGeometry;i.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,1,0],3));var j=new THREE.BufferGeometry;j.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,0,1],3)),this.handleGizmos={},this.pickerGizmos={},a.call(e.scale,"X")&&(this.handleGizmos.X=[[new THREE.Mesh(f,new b({color:e.colors.x})),[.5,0,0],[0,0,-Math.PI/2]],[new THREE.Line(h,new c({color:e.colors.x}))]],this.pickerGizmos.X=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[.6,0,0],[0,0,-Math.PI/2]]]),a.call(e.scale,"Y")&&(this.handleGizmos.Y=[[new THREE.Mesh(f,new b({color:e.colors.y})),[0,.5,0]],[new THREE.Line(i,new c({color:e.colors.y}))]],this.pickerGizmos.Y=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[0,.6,0]]]),a.call(e.scale,"Z")&&(this.handleGizmos.Z=[[new THREE.Mesh(f,new b({color:e.colors.z})),[0,0,.5],[Math.PI/2,0,0]],[new THREE.Line(j,new c({color:e.colors.z}))]],this.pickerGizmos.Z=[[new THREE.Mesh(new THREE.CylinderGeometry(.2,0,1,4,1,!1),d),[0,0,.6],[Math.PI/2,0,0]]]),a.call(e.scale,"XYZ")&&(this.handleGizmos.XYZ=[[new THREE.Mesh(new THREE.BoxGeometry(.125,.125,.125),new b({color:16777215,opacity:.25}))]],this.pickerGizmos.XYZ=[[new THREE.Mesh(new THREE.BoxGeometry(.4,.4,.4),d)]]),this.setActivePlane=function(a,b){var c=new THREE.Matrix4;b.applyMatrix4(c.getInverse(c.extractRotation(this.planes.XY.matrixWorld))),"X"===a&&(this.activePlane=this.planes.XY,Math.abs(b.y)>Math.abs(b.z)&&(this.activePlane=this.planes.XZ)),"Y"===a&&(this.activePlane=this.planes.XY,Math.abs(b.x)>Math.abs(b.z)&&(this.activePlane=this.planes.YZ)),"Z"===a&&(this.activePlane=this.planes.XZ,Math.abs(b.x)>Math.abs(b.y)&&(this.activePlane=this.planes.YZ)),"XYZ"===a&&(this.activePlane=this.planes.XYZE)},this.init()},THREE.TransformGizmoScale.prototype=Object.create(THREE.TransformGizmo.prototype),THREE.TransformGizmoScale.prototype.constructor=THREE.TransformGizmoScale,THREE.TransformControls=function(a,b,c){function d(a){if(void 0!==i.object&&k!==!0&&(void 0===a.button||0===a.button)){o="hover";var b=a.changedTouches?a.changedTouches[0]:a,c=h(b,l[j].pickers.children),d=null;c&&(d=c.object.name,a.preventDefault()),i.axis!==d&&(i.axis=d,i.update(),i.dispatchEvent(p))}}function e(a){if(void 0!==i.object&&k!==!0&&(void 0===a.button||0===a.button)){o="down";var b=a.changedTouches?a.changedTouches[0]:a;if(0===b.button||void 0===b.button){var c=h(b,l[j].pickers.children);if(c){a.preventDefault(),a.stopPropagation(),i.dispatchEvent(q),i.axis=c.object.name,i.update(),B.copy(V).sub(S).normalize(),l[j].setActivePlane(i.axis,B);var d=h(b,[l[j].activePlane]);d&&(N.copy(i.object.position),O.copy(i.object.scale),P.extractRotation(i.object.matrix),U.extractRotation(i.object.matrixWorld),Q.extractRotation(i.object.parent.matrixWorld),R.setFromMatrixScale(C.getInverse(i.object.parent.matrixWorld)),w.copy(d.point))}}k=!0}}function f(a){if(void 0!==i.object&&null!==i.axis&&k!==!1&&(void 0===a.button||0===a.button)){o="move";var b=a.changedTouches?a.changedTouches[0]:a,c=h(b,[l[j].activePlane]);if(c!==!1){if(a.preventDefault(),a.stopPropagation(),v.copy(c.point),"translate"===j)v.sub(w),v.multiply(R),"local"===i.space&&(v.applyMatrix4(C.getInverse(U)),i.axis.search("X")===-1&&(v.x=0),i.axis.search("Y")===-1&&(v.y=0),i.axis.search("Z")===-1&&(v.z=0),v.applyMatrix4(P),i.object.position.copy(N),i.object.position.add(v)),"world"!==i.space&&i.axis.search("XYZ")===-1||(i.axis.search("X")===-1&&(v.x=0),i.axis.search("Y")===-1&&(v.y=0),i.axis.search("Z")===-1&&(v.z=0),v.applyMatrix4(C.getInverse(Q)),i.object.position.copy(N),i.object.position.add(v)),null!==i.translationSnap&&("local"===i.space&&i.object.position.applyMatrix4(C.getInverse(U)),i.translationSnapOffset||(i.translationSnapOffset=N.clone(),"local"===i.space&&i.translationSnapOffset.applyMatrix4(C.getInverse(U)),i.translationSnapOffset.x-=Math.round(i.object.position.x/i.translationSnap)*i.translationSnap,i.translationSnapOffset.y-=Math.round(i.object.position.y/i.translationSnap)*i.translationSnap,i.translationSnapOffset.z-=Math.round(i.object.position.z/i.translationSnap)*i.translationSnap),i.axis.search("X")!==-1&&(i.object.position.x=Math.round(i.object.position.x/i.translationSnap)*i.translationSnap+i.translationSnapOffset.x),i.axis.search("Y")!==-1&&(i.object.position.y=Math.round(i.object.position.y/i.translationSnap)*i.translationSnap+i.translationSnapOffset.y),i.axis.search("Z")!==-1&&(i.object.position.z=Math.round(i.object.position.z/i.translationSnap)*i.translationSnap+i.translationSnapOffset.z),"local"===i.space&&i.object.position.applyMatrix4(U));else if("scale"===j){if(v.sub(w),v.multiply(R),"local"===i.space){var d=i.options.scale&&i.options.scale.lock===!0;// WebTundra modification
"XYZ"===i.axis||d?(z=1+(d?v.x+v.y+v.z:v.y)/Math.max(O.x,O.y,O.z),i.object.scale.x=O.x*z,i.object.scale.y=O.y*z,i.object.scale.z=O.z*z):(v.applyMatrix4(C.getInverse(U)),"X"===i.axis&&(i.object.scale.x=O.x*(1+v.x/O.x)),"Y"===i.axis&&(i.object.scale.y=O.y*(1+v.y/O.y)),"Z"===i.axis&&(i.object.scale.z=O.z*(1+v.z/O.z)))}}else"rotate"===j&&(v.sub(S),v.multiply(R),D.copy(w).sub(S),D.multiply(R),"E"===i.axis?(v.applyMatrix4(C.getInverse(A)),D.applyMatrix4(C.getInverse(A)),x.set(Math.atan2(v.z,v.y),Math.atan2(v.x,v.z),Math.atan2(v.y,v.x)),y.set(Math.atan2(D.z,D.y),Math.atan2(D.x,D.z),Math.atan2(D.y,D.x)),E.setFromRotationMatrix(C.getInverse(Q)),M.setFromAxisAngle(B,x.z-y.z),I.setFromRotationMatrix(U),E.multiplyQuaternions(E,M),E.multiplyQuaternions(E,I),i.object.quaternion.copy(E)):"XYZE"===i.axis?(M.setFromEuler(v.clone().cross(D).normalize()),// rotation axis
E.setFromRotationMatrix(C.getInverse(Q)),J.setFromAxisAngle(M,-v.clone().angleTo(D)),I.setFromRotationMatrix(U),E.multiplyQuaternions(E,J),E.multiplyQuaternions(E,I),i.object.quaternion.copy(E)):"local"===i.space?(v.applyMatrix4(C.getInverse(U)),D.applyMatrix4(C.getInverse(U)),x.set(Math.atan2(v.z,v.y),Math.atan2(v.x,v.z),Math.atan2(v.y,v.x)),y.set(Math.atan2(D.z,D.y),Math.atan2(D.x,D.z),Math.atan2(D.y,D.x)),I.setFromRotationMatrix(P),null!==i.rotationSnap?(J.setFromAxisAngle(F,Math.round((x.x-y.x)/i.rotationSnap)*i.rotationSnap),K.setFromAxisAngle(G,Math.round((x.y-y.y)/i.rotationSnap)*i.rotationSnap),L.setFromAxisAngle(H,Math.round((x.z-y.z)/i.rotationSnap)*i.rotationSnap)):(J.setFromAxisAngle(F,x.x-y.x),K.setFromAxisAngle(G,x.y-y.y),L.setFromAxisAngle(H,x.z-y.z)),"X"===i.axis&&I.multiplyQuaternions(I,J),"Y"===i.axis&&I.multiplyQuaternions(I,K),"Z"===i.axis&&I.multiplyQuaternions(I,L),i.object.quaternion.copy(I)):"world"===i.space&&(x.set(Math.atan2(v.z,v.y),Math.atan2(v.x,v.z),Math.atan2(v.y,v.x)),y.set(Math.atan2(D.z,D.y),Math.atan2(D.x,D.z),Math.atan2(D.y,D.x)),E.setFromRotationMatrix(C.getInverse(Q)),null!==i.rotationSnap?(J.setFromAxisAngle(F,Math.round((x.x-y.x)/i.rotationSnap)*i.rotationSnap),K.setFromAxisAngle(G,Math.round((x.y-y.y)/i.rotationSnap)*i.rotationSnap),L.setFromAxisAngle(H,Math.round((x.z-y.z)/i.rotationSnap)*i.rotationSnap)):(J.setFromAxisAngle(F,x.x-y.x),K.setFromAxisAngle(G,x.y-y.y),L.setFromAxisAngle(H,x.z-y.z)),I.setFromRotationMatrix(U),"X"===i.axis&&E.multiplyQuaternions(E,J),"Y"===i.axis&&E.multiplyQuaternions(E,K),"Z"===i.axis&&E.multiplyQuaternions(E,L),E.multiplyQuaternions(E,I),i.object.quaternion.copy(E)));i.update(),i.dispatchEvent(p),i.dispatchEvent(s)}}}function g(a){void 0!==a.button&&0!==a.button||("down"===o&&"S"===i.axis&&i.object&&(i.object.position.y=0,i.update()),o="up",k&&null!==i.axis&&(r.mode=j,i.dispatchEvent(r)),k=!1,i.translationSnapOffset=null,d(a))}function h(c,d){if(window.Tundra&&window.Tundra.renderer){
// WebTundra modification
var e=Tundra.renderer.raycast({x:c.clientX,y:c.clientY,targets:d,recursive:!0,ignoreECModel:!0});if(e&&e.object)
// mimic ray.intersectObjects response object
return{distance:e.distance,point:e.pos,face:e.face,faceIndex:-1,object:e.object}}var f=b.getBoundingClientRect(),g=(c.clientX-f.left)/f.width,h=(c.clientY-f.top)/f.height;u.set(2*g-1,-(2*h)+1),t.setFromCamera(u,a);var i=t.intersectObjects(d,!0);return!!i[0]&&i[0]}
// TODO: Make non-uniform scale and rotate play nice in hierarchies
// TODO: ADD RXYZ contol
THREE.Object3D.call(this),b=void 0!==b?b:document,this.camera=a,// WebTundra: Support multiple camera changing, maybe submit this to Three.js repo? :P
this.options=$.extend(!0,{colors:{}},c),// WebTundra: options to modify some functionalities and visuals
this.options.colors.x=this.options.colors.x?this.options.colors.x:16007990,this.options.colors.y=this.options.colors.y?this.options.colors.y:5025616,this.options.colors.z=this.options.colors.z?this.options.colors.z:2201331,this.options.colors.e=this.options.colors.e?this.options.colors.e:7951688,THREE.TransformGizmo.highlightColor=new THREE.Color(this.options.colors.highlight?this.options.colors.highlight:"#FFC107"),this.object=void 0,this.visible=!1,this.translationSnap=null,this.translationSnapOffset=null,this.rotationSnap=null,this.space="world",this.size=1,this.axis=null;var i=this,j="translate",k=!1,l={translate:new THREE.TransformGizmoTranslate(this.options),rotate:new THREE.TransformGizmoRotate(this.options),scale:new THREE.TransformGizmoScale(this.options)};for(var m in l){var n=l[m];n.visible=m===j,this.add(n)}var o="",p={type:"change"},q={type:"mouseDown"},r={type:"mouseUp",mode:j},s={type:"objectChange"},t=new THREE.Raycaster,u=new THREE.Vector3,v=new THREE.Vector3,w=new THREE.Vector3,x=new THREE.Vector3,y=new THREE.Vector3,z=1,A=new THREE.Matrix4,B=new THREE.Vector3,C=new THREE.Matrix4,D=new THREE.Vector3,E=new THREE.Quaternion,F=new THREE.Vector3(1,0,0),G=new THREE.Vector3(0,1,0),H=new THREE.Vector3(0,0,1),I=new THREE.Quaternion,J=new THREE.Quaternion,K=new THREE.Quaternion,L=new THREE.Quaternion,M=new THREE.Quaternion,N=new THREE.Vector3,O=new THREE.Vector3,P=new THREE.Matrix4,Q=new THREE.Matrix4,R=new THREE.Vector3,S=new THREE.Vector3,T=new THREE.Euler,U=new THREE.Matrix4,V=new THREE.Vector3,W=new THREE.Euler;b.addEventListener("mousedown",e,!1),b.addEventListener("touchstart",e,!1),b.addEventListener("mousemove",d,!1),b.addEventListener("touchmove",d,!1),b.addEventListener("mousemove",f,!1),b.addEventListener("touchmove",f,!1),b.addEventListener("mouseup",g,!1),b.addEventListener("mouseout",g,!1),b.addEventListener("touchend",g,!1),b.addEventListener("touchcancel",g,!1),b.addEventListener("touchleave",g,!1),this.dispose=function(){b.removeEventListener("mousedown",e),b.removeEventListener("touchstart",e),b.removeEventListener("mousemove",d),b.removeEventListener("touchmove",d),b.removeEventListener("mousemove",f),b.removeEventListener("touchmove",f),b.removeEventListener("mouseup",g),b.removeEventListener("mouseout",g),b.removeEventListener("touchend",g),b.removeEventListener("touchcancel",g),b.removeEventListener("touchleave",g)},this.attach=function(a){this.object=a,this.visible=!0,this.update()},this.detach=function(){this.object=void 0,this.visible=!1,this.axis=null},this.getMode=function(){return j},
// WebTundra: have two helpful methods to check if the TransformControls are attached to an object and to set another camera
this.isAttached=function(){return void 0!==i.object},this.setCamera=function(a){i.camera=a,i.update()},this.setMode=function(a){j=a?a:j,"scale"===j&&(i.space="local");for(var b in l)l[b].visible=b===j;this.update(),i.dispatchEvent(p)},this.setTranslationSnap=function(a){i.translationSnap=a},this.setRotationSnap=function(a){i.rotationSnap=a},this.setSize=function(a){i.size=a,this.update(),i.dispatchEvent(p)},this.setSpace=function(a){i.space=a,this.update(),i.dispatchEvent(p)},this.update=function(){void 0!==i.object&&(i.object.updateMatrixWorld(),S.setFromMatrixPosition(i.object.matrixWorld),T.setFromRotationMatrix(C.extractRotation(i.object.matrixWorld)),i.camera.updateMatrixWorld(),V.setFromMatrixPosition(i.camera.matrixWorld),W.setFromRotationMatrix(C.extractRotation(i.camera.matrixWorld)),z=S.distanceTo(V)/6*i.size,this.position.copy(S),this.scale.set(z,z,z),B.copy(V).sub(S).normalize(),"local"===i.space?l[j].update(T,B):"world"===i.space&&l[j].update(new THREE.Euler,B),l[j].highlight(i.axis))}},THREE.TransformControls.prototype=Object.create(THREE.Object3D.prototype),THREE.TransformControls.prototype.constructor=THREE.TransformControls}();